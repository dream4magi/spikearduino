<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files\microsoft visual studio 9.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="1.36">
 <Targets>
  <Target Name="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX\bin\Debug\ProjectX.exe">
   <Modules>
    <Module Name="projectx.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'ProjectX.exe' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'ProjectX.exe' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Warning">Because assembly 'ProjectX.exe' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="ProjectX">
       <Types>
        <Type Name="Cmd" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(ProjectX.Cmd+enumCmdType,System.Int32,System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Cmd" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Cmd.vb" Line="22">In member 'Cmd.New(Cmd.enumCmdType, Integer, Integer, Integer, Integer)', correct the casing of 'Cmd' in parameter name '_CmdType' by changing it to 'cmd'.</Issue>
            </Message>
            <Message Id="Time" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Cmd.vb" Line="22">In member 'Cmd.New(Cmd.enumCmdType, Integer, Integer, Integer, Integer)', correct the casing of 'Time' in parameter name 'Time' by changing it to 'time'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Cmd.vb" Line="22">In member 'Cmd.New(Cmd.enumCmdType, Integer, Integer, Integer, Integer)', remove the underscores from parameter name '_CmdType'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Cmd.vb" Line="22">In member 'Cmd.New(Cmd.enumCmdType, Integer, Integer, Integer, Integer)', remove the underscores from parameter name '_times'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Cmd.vb" Line="22">In member 'Cmd.New(Cmd.enumCmdType, Integer, Integer, Integer, Integer)', remove the underscores from parameter name '_value1'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Cmd.vb" Line="22">In member 'Cmd.New(Cmd.enumCmdType, Integer, Integer, Integer, Integer)', remove the underscores from parameter name '_value2'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CmdType" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Cmd.CmdType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#times" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Cmd.times' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TimeSpan" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Cmd.TimeSpan' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#value1" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Cmd.value1' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#value2" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Cmd.value2' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Cmd+enumCmdType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="enum" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'enum' in type name 'Cmd.enumCmdType' by changing it to 'Enum'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Cmd.enumCmdType'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="frmMain" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="frm" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'frm' in type name 'frmMain' by changing it to 'Frm'.</Issue>
          </Message>
          <Message Id="frm" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'frm' in type name 'frmMain'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#showListCmd(ProjectX.lstCmd)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="frmMain.vb" Line="7">Change 'lstCmd' in 'frmMain.showListCmd(lstCmd)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="show" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="frmMain.vb" Line="7">Correct the casing of 'show' in member name 'frmMain.showListCmd(lstCmd)' by changing it to 'Show'.</Issue>
            </Message>
            <Message Id="lst" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="frmMain.vb" Line="7">In method 'frmMain.showListCmd(lstCmd)', correct the spelling of 'lst' in parameter name 'lstCmd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="frmMain.vb" Line="12">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'frmMain.showListCmd(lstCmd)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="frmMain.vb" Line="12">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'frmMain.showListCmd(lstCmd)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="frmMain.vb" Line="12">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'frmMain.showListCmd(lstCmd)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="frmMain.vb" Line="12">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'frmMain.showListCmd(lstCmd)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="frmMain.vb" Line="12">Because the behavior of 'Integer.ToString()' could vary based on the current user's locale settings, replace this call in 'frmMain.showListCmd(lstCmd)' with a call to 'Integer.ToString(IFormatProvider)'. If the result of 'Integer.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="lstCmd" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="lst" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'lst' in type name 'lstCmd' by changing it to 'Lst'.</Issue>
          </Message>
          <Message Id="lst" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'lst' in type name 'lstCmd'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'lstCmd' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Process" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(ProjectX.Cmd)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="New" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Process.vb" Line="19">In member 'Process.Add(Cmd)', correct the casing of 'New' in parameter name 'NewCmd' by changing it to 'new'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Clear(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="index" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Process.vb" Line="43">Parameter 'index' of 'Process.Clear(Integer)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Edit(System.Int32,ProjectX.Cmd)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Cmd" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Process.vb" Line="59">In member 'Process.Edit(Integer, Cmd)', correct the casing of 'Cmd' in parameter name 'Cmd' by changing it to 'cmd'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Insert(System.Int32,ProjectX.Cmd)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="New" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Process.vb" Line="27">In member 'Process.Insert(Integer, Cmd)', correct the casing of 'New' in parameter name 'NewCmd' by changing it to 'new'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#lstCmd" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Process.vb" Line="5">Change 'lstCmd' in 'Process.lstCmd()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="lst" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Process.vb" Line="5">Correct the casing of 'lst' in member name 'Process.lstCmd()' by changing it to 'Lst'.</Issue>
            </Message>
            <Message Id="lst" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Process.vb" Line="5">Correct the spelling of 'lst' in member name 'Process.lstCmd()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#p_lstCmd" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'Process.p_lstCmd' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'lstCmd' in 'Process.p_lstCmd' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message Id="lst" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'lst' in member name 'Process.p_lstCmd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Reverse(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="index" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Process.vb" Line="51">Parameter 'index' of 'Process.Reverse(Integer)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ListChanged" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Process.ListChangedEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Process+ListChangedEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="lst" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'Process.ListChangedEventHandler', correct the spelling of 'lst' in parameter name 'lstCmd' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Process.ListChangedEventHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Invoke(System.Object,ProjectX.lstCmd)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'lstCmd' in 'Process.ListChangedEventHandler.Invoke(Object, lstCmd)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ProcessException" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="ExceptionsShouldBePublic" Category="Microsoft.Design" CheckId="CA1064" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Warning">Make exception class 'ProcessException' public.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ProcessException': protected ProcessException(SerializationInfo, StreamingContext).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'ProcessException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="ProcessException.vb" Line="4">'ProcessException.New(String)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Servo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Move(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Offset" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="C:\Users\SPK.L\Desktop\ProjectX\ProjectX\ProjectX" File="Servo.vb" Line="20">In member 'Servo.Move(Integer)', correct the casing of 'Offset' in parameter name 'Offset' by changing it to 'offset'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LevelChanged" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Servo.LevelChangedEventHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Servo.LevelChangedEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Servo+LevelChangedEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Level" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'Servo.LevelChangedEventHandler', correct the casing of 'Level' in parameter name 'Level' by changing it to 'level'.</Issue>
          </Message>
          <Message Id="Sender" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'Servo.LevelChangedEventHandler', correct the casing of 'Sender' in parameter name 'Sender' by changing it to 'sender'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Servo.LevelChangedEventHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Servo+ServoException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'Servo.ServoException': protected ServoException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'Servo.ServoException': public ServoException().</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'Servo.ServoException' as this type implements ISerializable.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2010-09-26 07:33:10Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'Servo.ServoException'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182127(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182264(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
   <Name>Declare event handlers correctly</Name>
   <Description>By convention, .NET events have two parameters that specify the event sender and event data. Event handler signatures should follow this form: void MyEventHandler(object sender, EventArgs e). The 'sender' parameter is always of type System.Object, even if it is possible to employ a more specific type. The 'e' parameter is always of type System.EventArgs. Events that do not provide event data should use the System.EventHandler delegate type. Event handlers return void so that they can send each event to multiple target methods. Any value returned by a target would be lost after the first call.</Description>
   <Resolution Name="First">Declare the first parameter of {0} as an object named 'sender'.</Resolution>
   <Resolution Name="Second">Declare the second parameter of {0} as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182133(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182141(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182142(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ExceptionsShouldBePublic" Category="Microsoft.Design" CheckId="CA1064">
   <Name>Exceptions should be public</Name>
   <Description>Exception classes should either be public, or have a non-generic public ancestor.</Description>
   <Resolution Name="Default">Make exception class {0} public.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/bb264484(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="DelegateParameter">In delegate {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182240(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="DelegateParameter">In delegate {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/bb264492(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
   <Name>Identifiers should have correct suffix</Name>
   <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
   <Resolution Name="Default">Rename {0} to end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182244(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="MemberParameter">In member {0}, remove the underscores from parameter name {1}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182245(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="NamingRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182151(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182156(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824">
   <Name>Mark assemblies with NeutralResourcesLanguageAttribute</Name>
   <Description>The NeutralResourcesLanguage attribute informs the ResourceManager of the language used to render the neutral culture's resources for an assembly. When looking up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources located in the main assembly, instead of searching for a satellite assembly with the current user interface culture for the current thread. This will improve lookup performance for the first resource you load and can reduce your working set.</Description>
   <Resolution Name="Default">Because assembly {0} contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/bb385967(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="PerformanceRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182350(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182162(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="DesignRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182268(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="UsageRules.dll" Version="9.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn2.microsoft.com/ms182190(VS.90).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="GlobalizationRules.dll" Version="9.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
